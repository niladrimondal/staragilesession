https://minikube.sigs.k8s.io/docs/start/
minikube kubectl -- get pods -A
   20  alias kubectl="minikube kubectl --"
   21  kubectl get pods
   24  kubectl run nginx --image="nginx"
   25  kubectl get pods
   26  kubectl get nodes
   27  kubectl explain pods
   28  kubectl get pods
   31  minikube kubectl get pods
   32  minikube kubectl explain pods
   
   37  minikube kubectl create -f pod.yaml
   38  minikube kubectl create -- -f pod.yaml
   39  minikube kubectl delete pods nginx
   40  minikube kubectl create -- -f pod.yaml
   41  minikube kubectl describe pods nginx
   42  clearf
   43  clear
   44  vi sample.yml
   45  clear
   46  minikube kubectl create -- -f sample.yml
   47  vi sample.yml
   48  minikube kubectl create -- -f sample.yml
   49  vi sample.yml
   50  minikube kubectl get pods
   51  vi pod.yaml
   52  minikube kubectl apply  -- -f sample.yml
   53  minikube kubectl apply  -- -f pod.yaml
   54  clear
   55  minikube kubectl get pods
   56  minikube kubectl describe pods nginx

++++++++++++++++++++++++++++++++++++++++++
Deploy Addressbook through Minikube:

Create Deployment:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: addressbook-deployment
  labels:
    app: addressbook
spec:
  replicas: 3
  selector:
    matchLabels:
      app: addressbook
  template:
    metadata:
      labels:
        app: addressbook
    spec:
      containers:
      - name: addressbook
        image: niladrimondaldcr/addressbook:1.0
        ports:
        - containerPort: 8080
		
Create Service:
apiVersion: v1
kind: Service
metadata:
  name: address-service
spec:
  type: NodePort
  selector:
    app: addressbook
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 8080
      targetPort: 8080
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      nodePort: 30007

It may take a moment, but your deployment will soon show up when you run:
kubectl get services address-service

The easiest way to access this service is to let minikube launch a web browser for you:
minikube service address-service

Alternatively, use kubectl to forward the port:
kubectl port-forward service/hello-minikube 7080:8080

curl http://192.168.49.2:30007/addressbook/

+++++++++++++++++++++++++++++++++++++++++++++++
Setup eksCtl and deploy eks cluster
https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html

1. Install AWS CLI 
sudo apt  install awscli

#configure AWS CLI with access key and secret access key
ubuntu@ip-172-31-29-240:~$ aws configure
AWS Access Key ID [None]: <access Key>
AWS Secret Access Key [None]: <secret access key>
Default region name [None]: <region>
Default output format [None]: json


2. install kubectl

a. Download the kubectl binary for your cluster's Kubernetes version from Amazon S3 ua. sing the command for your device's 
hardware platform. The first link for each version is for amd64 and the second link is for arm64.
curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl

b. (Optional) Verify the downloaded binary with the SHA-256 checksum for your binary.
curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl.sha256

c. Apply execute permissions to the binary.
chmod +x ./kubectl

d. Copy the binary to a folder in your PATH. If you have already installed a version of kubectl, 
then we recommend creating a $HOME/bin/kubectl and ensuring that $HOME/bin comes first in your $PATH.
mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH

e. (Optional) Add the $HOME/bin path to your shell initialization file so that it is configured when you open a shell.
echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc

f. After you install kubectl, you can verify its version.
kubectl version --short --client


3. Install EKCTL
# for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
ARCH=amd64
PLATFORM=$(uname -s)_$ARCH

curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"

# (Optional) Verify checksum
curl -sL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check

tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz

sudo mv /tmp/eksctl /usr/local/bin

#ubuntu@ip-172-31-29-240:~$ eksctl version
0.147.0

++++++++++++++++++++++++++++++++++++++++++++++
eksctl create cluster --name my-eks --region ap-south-1 --node-type t2.micro --node-ami-family=Ubuntu2004 --nodes=2 

eksctl delete cluster --name my-eks --region ap-south-1

eksctl create cluster --name my-eks-sg --version 1.27 --region ap-south-1  --nodegroup-name kube-nodes --node-type t2.micro --node-ami-family=Ubuntu2004 --nodes 2

